{
  "fileTypes": ["kn"],
  "name": "knot",
  "patterns": [
    {
      "include": "#main"
    }
  ],
  "scopeName": "source.knot",
  "uuid": "",
  "repository": {
    "main": {
      "patterns": [
        {
          "include": "#import"
        },
        {
          "include": "#declaration"
        },
        {
          "include": "#storage"
        },
        {
          "include": "#keyword"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#symbol"
        }
      ]
    },
    "boolean": {
      "patterns": [
        {
          "match": "(\\btrue\\b)",
          "name": "constant.language.boolean.true.knot"
        },
        {
          "match": "(\\bfalse\\b)",
          "name": "constant.language.boolean.false.knot"
        }
      ]
    },
    "closure": {
      "patterns": [
        {
          "begin": "({)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.block.knot"
            }
          },
          "patterns": [
            {
              "include": "#uid_closure"
            }
          ],
          "end": "(})",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.block.knot"
            }
          }
        }
      ]
    },
    "constant": {
      "patterns": [
        {
          "match": "(?:(\\bmain\\b)(\\s+))?(\\bconst\\b)(\\s+)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "captures": {
            "1": {
              "name": "keyword.control.main.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "storage.type.knot"
            },
            "4": {
              "name": "text.knot"
            },
            "5": {
              "name": "variable.other.constant.knot"
            }
          }
        }
      ]
    },
    "declaration": {
      "patterns": [
        {
          "include": "#constant"
        },
        {
          "include": "#enum"
        },
        {
          "include": "#function"
        },
        {
          "include": "#view"
        },
        {
          "include": "#style"
        }
      ]
    },
    "enum": {
      "patterns": [
        {
          "match": "(?:(\\bmain\\b)(\\s+))?(\\benum\\b)(\\s+)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "captures": {
            "1": {
              "name": "keyword.control.main.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "storage.type.enum.knot"
            },
            "4": {
              "name": "text.knot"
            },
            "5": {
              "name": "entity.name.type.enum.knot"
            }
          }
        },
        {
          "begin": "(\\s+)(\\|)(\\s*)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)(\\()",
          "beginCaptures": {
            "1": {
              "name": "text.knot"
            },
            "2": {
              "name": "keyword.operator.type.knot"
            },
            "3": {
              "name": "text.knot"
            },
            "4": {
              "name": "variable.other.constant.knot"
            },
            "5": {
              "name": "punctuation.definition.parameters.begin.knot"
            }
          },
          "patterns": [
            {
              "include": "#uid_enum_variant_parameterized"
            }
          ],
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.parameters.end.knot"
            }
          }
        },
        {
          "match": "(\\s+)(\\|)(\\s*)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "captures": {
            "1": {
              "name": "text.knot"
            },
            "2": {
              "name": "keyword.operator.type.knot"
            },
            "3": {
              "name": "text.knot"
            },
            "4": {
              "name": "variable.other.constant.knot"
            }
          }
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#primitive"
        },
        {
          "include": "#group"
        },
        {
          "include": "#closure"
        },
        {
          "include": "#function_call"
        },
        {
          "include": "#identifier"
        },
        {
          "include": "#jsx"
        }
      ]
    },
    "function": {
      "patterns": [
        {
          "begin": "(?:(\\bmain\\b)(\\s+))?(\\bfunc\\b)(\\s+)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)(\\s*)(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.main.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "storage.type.function.knot"
            },
            "4": {
              "name": "text.knot"
            },
            "5": {
              "name": "entity.name.function.knot"
            },
            "6": {
              "name": "text.knot"
            },
            "7": {
              "name": "punctuation.definition.parameters.begin.knot"
            }
          },
          "patterns": [
            {
              "include": "#uid_function_signature_parameterized"
            }
          ],
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.parameters.end.knot"
            }
          }
        },
        {
          "match": "(?:(\\bmain\\b)(\\s+))?(\\bfunc\\b)(\\s+)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "captures": {
            "1": {
              "name": "keyword.control.main.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "storage.type.function.knot"
            },
            "4": {
              "name": "text.knot"
            },
            "5": {
              "name": "entity.name.function.knot"
            }
          }
        }
      ]
    },
    "function_call": {
      "patterns": [
        {
          "begin": "(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)(\\s*)(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "meta.brace.round.knot"
            }
          },
          "patterns": [
            {
              "include": "#uid_function_call"
            }
          ],
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "meta.brace.round.knot"
            }
          }
        }
      ]
    },
    "group": {
      "patterns": [
        {
          "begin": "(\\()",
          "beginCaptures": {
            "1": {
              "name": "meta.brace.round.knot"
            }
          },
          "patterns": [
            {
              "include": "#group__1"
            }
          ],
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "meta.brace.round.knot"
            }
          }
        }
      ]
    },
    "group__1": {
      "patterns": [
        {
          "include": "#expression"
        },
        {
          "include": "#symbol"
        }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "match": "(\\B\\$[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "name": "variable.other.mixin.knot"
        },
        {
          "match": "(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "name": "variable.other.constant.knot"
        }
      ]
    },
    "import": {
      "patterns": [
        {
          "begin": "(\\bimport\\b)(\\s*)({)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.import.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "punctuation.definition.block.knot"
            }
          },
          "patterns": [
            {
              "include": "#uid_import"
            }
          ],
          "end": "(})(\\s*)(\\bfrom\\b)|(})",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.block.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "keyword.control.from.knot"
            },
            "4": {
              "name": "punctuation.definition.block.knot"
            }
          }
        }
      ]
    },
    "jsx": {
      "patterns": [
        {
          "begin": "(<)(?:(\\b[A-Z][_a-zA-Z\\d]*\\b)|(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b))(>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.knot"
            },
            "2": {
              "name": "support.class.component.knot"
            },
            "3": {
              "name": "entity.name.tag.knot"
            },
            "4": {
              "name": "punctuation.definition.tag.end.knot"
            }
          },
          "patterns": [
            {
              "include": "#uid_jsx_parent"
            }
          ],
          "end": "(</)(?:(\\b[A-Z][_a-zA-Z\\d]*\\b)|(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b))(>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.knot"
            },
            "2": {
              "name": "support.class.component.knot"
            },
            "3": {
              "name": "entity.name.tag.knot"
            },
            "4": {
              "name": "punctuation.definition.tag.end.knot"
            }
          }
        },
        {
          "begin": "(<)(?:(\\b[A-Z][_a-zA-Z\\d]*\\b)|(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.knot"
            },
            "2": {
              "name": "support.class.component.knot"
            },
            "3": {
              "name": "entity.name.tag.knot"
            }
          },
          "patterns": [
            {
              "include": "#uid_jsx_complex"
            }
          ],
          "end": "(>)(</)(?:(\\b[A-Z][_a-zA-Z\\d]*\\b)|(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b))(>)|(>)|(/>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.knot"
            },
            "2": {
              "name": "punctuation.definition.tag.begin.knot"
            },
            "3": {
              "name": "support.class.component.knot"
            },
            "4": {
              "name": "entity.name.tag.knot"
            },
            "5": {
              "name": "punctuation.definition.tag.end.knot"
            },
            "6": {
              "name": "punctuation.definition.tag.end.knot"
            },
            "7": {
              "name": "punctuation.definition.tag.end.knot"
            }
          }
        },
        {
          "begin": "(<)(?:(\\b[A-Z][_a-zA-Z\\d]*\\b)|(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.knot"
            },
            "2": {
              "name": "support.class.component.knot"
            },
            "3": {
              "name": "entity.name.tag.knot"
            }
          },
          "patterns": [
            {
              "include": "#uid_jsx_inline"
            }
          ],
          "end": "(/>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.knot"
            }
          }
        },
        {
          "match": "(<)(?:(\\b[A-Z][_a-zA-Z\\d]*\\b)|(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b))(\\s*)(/>|>)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tag.begin.knot"
            },
            "2": {
              "name": "support.class.component.knot"
            },
            "3": {
              "name": "entity.name.tag.knot"
            },
            "4": {
              "name": "text.knot"
            },
            "5": {
              "name": "punctuation.definition.tag.end.knot"
            }
          }
        },
        {
          "match": "(</)(?:(\\b[A-Z][_a-zA-Z\\d]*\\b)|(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b))(>)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tag.begin.knot"
            },
            "2": {
              "name": "support.class.component.knot"
            },
            "3": {
              "name": "entity.name.tag.knot"
            },
            "4": {
              "name": "punctuation.definition.tag.end.knot"
            }
          }
        },
        {
          "match": "(<)(>)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tag.begin.knot"
            },
            "2": {
              "name": "punctuation.definition.tag.end.knot"
            }
          }
        },
        {
          "match": "(<)(/>)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tag.begin.knot"
            },
            "2": {
              "name": "punctuation.definition.tag.end.knot"
            }
          }
        }
      ]
    },
    "jsx_attribute": {
      "patterns": [
        {
          "match": "(\\s+)(\\B[\\.\\x{0023}][_a-zA-Z][_a-zA-Z\\d]*\\b|\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)(=)",
          "captures": {
            "1": {
              "name": "text.knot"
            },
            "2": {
              "name": "entity.other.attribute-name.knot"
            },
            "3": {
              "name": "keyword.operator.assignment.knot"
            }
          }
        },
        {
          "include": "#primitive"
        },
        {
          "match": "(\\s+)(\\B[\\.\\x{0023}][_a-zA-Z][_a-zA-Z\\d]*\\b|\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)(=)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "captures": {
            "1": {
              "name": "text.knot"
            },
            "2": {
              "name": "entity.other.attribute-name.knot"
            },
            "3": {
              "name": "keyword.operator.assignment.knot"
            },
            "4": {
              "name": "variable.other.constant.knot"
            }
          }
        },
        {
          "match": "(\\s+)(\\B[\\.\\x{0023}][_a-zA-Z][_a-zA-Z\\d]*\\b|\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "captures": {
            "1": {
              "name": "text.knot"
            },
            "2": {
              "name": "entity.other.attribute-name.knot"
            }
          }
        },
        {
          "include": "#expression"
        },
        {
          "include": "#symbol"
        }
      ]
    },
    "jsx_inner": {
      "patterns": [
        {
          "include": "#closure"
        },
        {
          "include": "#jsx"
        },
        {
          "match": "([^\\x{003c}\\x{007b}]+)",
          "name": "text.jsx.knot"
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "match": "(\\bimport\\b)",
          "name": "keyword.control.import.knot"
        },
        {
          "match": "(\\bas\\b)",
          "name": "keyword.control.as.knot"
        },
        {
          "match": "(\\bfrom\\b)",
          "name": "keyword.control.from.knot"
        },
        {
          "match": "(\\bmain\\b)",
          "name": "keyword.control.main.knot"
        }
      ]
    },
    "nil": {
      "patterns": [
        {
          "match": "(\\bnil\\b)",
          "name": "constant.language.nil.knot"
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "match": "(\\b\\d+\\.\\d+|\\b\\d+)",
          "name": "constant.numeric.decimal.knot"
        }
      ]
    },
    "operator": {
      "patterns": [
        {
          "match": "(\\|)",
          "name": "keyword.operator.type.knot"
        },
        {
          "match": "(=)",
          "name": "keyword.operator.assignment.knot"
        },
        {
          "match": "(!=|==)",
          "name": "keyword.operator.comparison.knot"
        },
        {
          "match": "(&&|\\|\\||!)",
          "name": "keyword.operator.logical.knot"
        },
        {
          "match": "(>=|<=|>|<)",
          "name": "keyword.operator.relational.knot"
        },
        {
          "match": "(-|\\+|\\*|\\^|/)",
          "name": "keyword.operator.arithmetic.knot"
        }
      ]
    },
    "primitive": {
      "patterns": [
        {
          "include": "#nil"
        },
        {
          "include": "#boolean"
        },
        {
          "include": "#number"
        },
        {
          "include": "#string"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "match": "(\\[|\\])",
          "name": "meta.brace.square.knot"
        },
        {
          "match": "(\\(|\\))",
          "name": "meta.brace.round.knot"
        },
        {
          "match": "({|})",
          "name": "punctuation.definition.block.knot"
        },
        {
          "match": "(:)",
          "name": "punctuation.separator.key-value.knot"
        },
        {
          "match": "(,)",
          "name": "punctuation.separator.comma.knot"
        },
        {
          "match": "(\\.)",
          "name": "punctuation.accessor.knot"
        },
        {
          "match": "(;)",
          "name": "punctuation.terminator.knot"
        }
      ]
    },
    "storage": {
      "patterns": [
        {
          "match": "(\\blet\\b|\\bconst\\b)",
          "name": "storage.type.knot"
        },
        {
          "match": "(\\benum\\b)",
          "name": "storage.type.enum.knot"
        },
        {
          "match": "(\\bfunc\\b)",
          "name": "storage.type.function.knot"
        },
        {
          "match": "(\\bview\\b)",
          "name": "storage.type.function.knot"
        }
      ]
    },
    "storage_symbol": {
      "patterns": [
        {
          "match": "(->)",
          "name": "storage.type.arrow.knot"
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "begin": "(\")",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.knot"
            }
          },
          "contentName": "string.quoted.double.knot",
          "end": "(\")",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.knot"
            }
          }
        }
      ]
    },
    "style": {
      "patterns": [
        {
          "begin": "(?:(\\bmain\\b)(\\s+))?(\\bstyle\\b)(\\s+)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)(\\s*)(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.main.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "storage.type.style.knot"
            },
            "4": {
              "name": "text.knot"
            },
            "5": {
              "name": "entity.name.style.knot"
            },
            "6": {
              "name": "text.knot"
            },
            "7": {
              "name": "punctuation.definition.parameters.begin.knot"
            }
          },
          "patterns": [
            {
              "include": "#uid_style_signature_parameterized"
            }
          ],
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.parameters.end.knot"
            }
          }
        },
        {
          "match": "(?:(\\bmain\\b)(\\s+))?(\\bstyle\\b)(\\s+)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "captures": {
            "1": {
              "name": "keyword.control.main.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "storage.type.style.knot"
            },
            "4": {
              "name": "text.knot"
            },
            "5": {
              "name": "entity.name.style.knot"
            }
          }
        },
        {
          "begin": "({)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.block.knot"
            }
          },
          "patterns": [
            {
              "include": "#uid_style_body"
            }
          ],
          "end": "(})",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.block.knot"
            }
          }
        }
      ]
    },
    "symbol": {
      "patterns": [
        {
          "include": "#operator"
        },
        {
          "include": "#punctuation"
        },
        {
          "include": "#storage_symbol"
        }
      ]
    },
    "uid_closure": {
      "patterns": [
        {
          "include": "#variable"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#symbol"
        }
      ]
    },
    "uid_enum_variant_parameterized": {
      "patterns": [
        {
          "match": "(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "name": "support.type.knot"
        },
        {
          "include": "#symbol"
        }
      ]
    },
    "uid_function_call": {
      "patterns": [
        {
          "include": "#expression"
        },
        {
          "include": "#symbol"
        }
      ]
    },
    "uid_function_signature_parameterized": {
      "patterns": [
        {
          "match": "(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)(\\s*)(=)",
          "captures": {
            "1": {
              "name": "variable.parameter.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "keyword.operator.assignment.knot"
            }
          }
        },
        {
          "match": "(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)(\\s*)(:)(\\s*)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "captures": {
            "1": {
              "name": "variable.parameter.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "keyword.operator.type.annotation.knot"
            },
            "4": {
              "name": "text.knot"
            },
            "5": {
              "name": "support.type.knot"
            }
          }
        },
        {
          "match": "(:)(\\s*)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "captures": {
            "1": {
              "name": "keyword.operator.type.annotation.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "support.type.knot"
            }
          }
        },
        {
          "include": "#expression"
        },
        {
          "include": "#symbol"
        }
      ]
    },
    "uid_import": {
      "patterns": [
        {
          "match": "(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)(\\s+)(\\bas\\b)(\\s+)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "captures": {
            "1": {
              "name": "variable.other.constant.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "keyword.control.as.knot"
            },
            "4": {
              "name": "text.knot"
            },
            "5": {
              "name": "variable.other.constant.alias.knot"
            }
          }
        },
        {
          "match": "(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "name": "variable.other.constant.alias.knot"
        },
        {
          "include": "#punctuation"
        }
      ]
    },
    "uid_jsx_complex": {
      "patterns": [
        {
          "begin": "(>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.knot"
            }
          },
          "patterns": [
            {
              "include": "#uid_jsx_inner"
            }
          ],
          "end": "(</)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.knot"
            }
          }
        },
        {
          "include": "#jsx_attribute"
        }
      ]
    },
    "uid_jsx_inline": {
      "patterns": [
        {
          "include": "#jsx_attribute"
        }
      ]
    },
    "uid_jsx_inner": {
      "patterns": [
        {
          "include": "#jsx_inner"
        }
      ]
    },
    "uid_jsx_parent": {
      "patterns": [
        {
          "include": "#jsx_inner"
        }
      ]
    },
    "uid_string": {
      "patterns": []
    },
    "uid_style_body": {
      "patterns": [
        {
          "begin": "(\\B[\\.\\x{0023}][_a-zA-Z][_a-zA-Z\\d]*\\b|\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)(\\s*)({)",
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name.ruleset.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "punctuation.definition.block.knot"
            }
          },
          "patterns": [
            {
              "include": "#uid_style_ruleset"
            }
          ],
          "end": "(})",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.block.knot"
            }
          }
        }
      ]
    },
    "uid_style_ruleset": {
      "patterns": [
        {
          "match": "(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)(:)",
          "captures": {
            "1": {
              "name": "support.type.property-name.knot"
            },
            "2": {
              "name": "punctuation.separator.key-value.knot"
            }
          }
        },
        {
          "include": "#expression"
        },
        {
          "include": "#symbol"
        }
      ]
    },
    "uid_style_signature_parameterized": {
      "patterns": [
        {
          "match": "(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)(\\s*)(=)",
          "captures": {
            "1": {
              "name": "variable.parameter.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "keyword.operator.assignment.knot"
            }
          }
        },
        {
          "match": "(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)(\\s*)(:)(\\s*)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "captures": {
            "1": {
              "name": "variable.parameter.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "keyword.operator.type.annotation.knot"
            },
            "4": {
              "name": "text.knot"
            },
            "5": {
              "name": "support.type.knot"
            }
          }
        },
        {
          "match": "(:)(\\s*)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "captures": {
            "1": {
              "name": "keyword.operator.type.annotation.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "support.type.knot"
            }
          }
        },
        {
          "include": "#expression"
        },
        {
          "include": "#symbol"
        }
      ]
    },
    "uid_view_signature_parameterized": {
      "patterns": [
        {
          "match": "(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)(\\s*)(=)",
          "captures": {
            "1": {
              "name": "variable.parameter.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "keyword.operator.assignment.knot"
            }
          }
        },
        {
          "match": "(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)(\\s*)(:)(\\s*)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "captures": {
            "1": {
              "name": "variable.parameter.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "keyword.operator.type.annotation.knot"
            },
            "4": {
              "name": "text.knot"
            },
            "5": {
              "name": "support.type.knot"
            }
          }
        },
        {
          "match": "(:)(\\s*)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "captures": {
            "1": {
              "name": "keyword.operator.type.annotation.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "support.type.knot"
            }
          }
        },
        {
          "include": "#expression"
        },
        {
          "include": "#symbol"
        }
      ]
    },
    "variable": {
      "patterns": [
        {
          "match": "(\\blet\\b)(\\s+)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "captures": {
            "1": {
              "name": "storage.type.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "variable.other.knot"
            }
          }
        }
      ]
    },
    "view": {
      "patterns": [
        {
          "begin": "(?:(\\bmain\\b)(\\s+))?(\\bview\\b)(\\s+)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)(\\s*)(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.main.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "storage.type.view.knot"
            },
            "4": {
              "name": "text.knot"
            },
            "5": {
              "name": "entity.name.view.knot"
            },
            "6": {
              "name": "text.knot"
            },
            "7": {
              "name": "punctuation.definition.parameters.begin.knot"
            }
          },
          "patterns": [
            {
              "include": "#uid_view_signature_parameterized"
            }
          ],
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.parameters.end.knot"
            }
          }
        },
        {
          "match": "(?:(\\bmain\\b)(\\s+))?(\\bview\\b)(\\s+)(\\b[_a-zA-Z][_a-zA-Z\\d]*\\b)",
          "captures": {
            "1": {
              "name": "keyword.control.main.knot"
            },
            "2": {
              "name": "text.knot"
            },
            "3": {
              "name": "storage.type.view.knot"
            },
            "4": {
              "name": "text.knot"
            },
            "5": {
              "name": "entity.name.view.knot"
            }
          }
        }
      ]
    }
  }
}
